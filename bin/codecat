#!/bin/bash

usage() {
    echo "Usage: codecat [options] file1/directory1 [file2/directory2...] [-e extension1 extension2...]"
    echo "Options:"
    echo "  -e, --ext     Specify file extensions to filter (optional)"
    echo "  -v, --verbose List files that would be processed (dry-run)"
    echo "  -h, --help    Show this help message"
    echo
    echo "Examples:"
    echo "  codecat /path/to/dir1 /path/to/dir2 -e js py         # Concat .js and .py files from specified dirs"
    echo "  codecat /path/to/dir                                 # Concat all files from specified dir"
    echo "  codecat -v /path/to/dir -e py                        # Show .py files without processing"
    echo "  codecat file1.js file2.js dir1 -e js                 # Concat specific files and files from dir"
    echo "  codecat *.js dir1                                    # Concat all js files in current dir and dir1"
    exit 1
}

# Initialize arrays
declare -a paths=()
declare -a extensions=()
declare -a files=()
verbose=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            ;;
        -v|--verbose)
            verbose=true
            shift
            ;;
        -e|--ext)
            shift
            # Collect all extensions until next option or end
            while [[ $# -gt 0 && ! $1 =~ ^- ]]; do
                extensions+=("$1")
                shift
            done
            ;;
        -*)
            echo "Error: Unknown option: $1"
            usage
            ;;
        *)
            # If not an option, add to paths
            paths+=("$1")
            shift
            ;;
    esac
done

# Check if at least one path is provided
if [ ${#paths[@]} -eq 0 ]; then
    echo "Error: At least one file or directory must be specified"
    usage
fi

# Function to validate path
validate_path() {
    local path="$1"
    if [ ! -e "$path" ]; then
        echo "Error: Path does not exist: $path"
        exit 1
    fi
}

# Function to check if file matches extension filter
matches_extension() {
    local file="$1"
    # If no extensions specified, accept all files
    if [ ${#extensions[@]} -eq 0 ]; then
        return 0
    fi
    
    for ext in "${extensions[@]}"; do
        if [[ "$file" =~ \.$ext$ ]]; then
            return 0
        fi
    done
    return 1
}

# Build the find command for directories
build_find_command() {
    local dir="$1"
    local cmd="find \"$dir\" -type f"
    
    # If extensions are specified, add them to the command
    if [ ${#extensions[@]} -gt 0 ]; then
        cmd="$cmd \( "
        for i in "${!extensions[@]}"; do
            if [ $i -gt 0 ]; then
                cmd="$cmd -o "
            fi
            cmd="$cmd -name \"*.${extensions[$i]}\""
        done
        cmd="$cmd \)"
    fi
    
    echo "$cmd"
}

# Function to collect all matching files
collect_files() {
    local collected_files=()
    
    for path in "${paths[@]}"; do
        validate_path "$path"
        
        if [ -f "$path" ]; then
            # If it's a file, check if it matches extension filter
            if matches_extension "$path"; then
                collected_files+=("$path")
            fi
        elif [ -d "$path" ]; then
            # If it's a directory, use find
            find_cmd=$(build_find_command "$path")
            while IFS= read -r file; do
                if [ -f "$file" ]; then
                    collected_files+=("$file")
                fi
            done < <(eval "$find_cmd")
        fi
    done
    
    # Sort files for consistent output
    printf "%s\n" "${collected_files[@]}" | sort
}

# Collect all files
mapfile -t files < <(collect_files)

if [ "$verbose" = true ]; then
    echo -e "\nFiles that would be processed:"
    echo "======================="
    printf "%s\n" "${files[@]}"
    echo -e "\nTotal files: ${#files[@]}"
    
    # If extensions were specified, show them
    if [ ${#extensions[@]} -gt 0 ]; then
        echo "File extensions filter: ${extensions[*]}"
    else
        echo "Processing all file types"
    fi
    echo -e "======================="
    exit 0
fi

# Process the files only if not in verbose mode
for file in "${files[@]}"; do
    echo -e "\n/* File: $file */"
    cat "$file"
    echo -e "\n/* End of file: $file */"
    echo
done